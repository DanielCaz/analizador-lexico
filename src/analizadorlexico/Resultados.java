package analizadorlexico;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.util.Hashtable;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Resultados extends javax.swing.JFrame {

    private static LinkedList<String> listaTokens;
    private final LinkedList<Token> objetosTokens;
    private final Hashtable<String, Token> simbolos;

    /**
     * Creates new form Resultados
     */
    public Resultados(LinkedList<String> listaTokens) {
        initComponents();
        Resultados.listaTokens = listaTokens;
        objetosTokens = new LinkedList<>();

        simbolos = getSimbolos();
        DefaultTableModel modelSimbolos = (DefaultTableModel) jTableSimbolos.getModel();

        DefaultTableModel model = (DefaultTableModel) jTableTokens.getModel();
        String[] filas = (String[]) listaTokens.toArray(new String[listaTokens.size()]);
        for (String fila : filas) {
            if (simbolos.containsKey(fila)) {
                Token token = simbolos.get(fila);
                objetosTokens.add(token);
                model.addRow(new String[]{fila, token.getIdentificador(), token.getCategoria()});
            } else if (fila.matches("^(\\$\\w+)$")) {
                Token token = new Token(fila, "V", "VAR");
                model.addRow(token.toStringArray());
                if (!simbolos.containsKey(fila)) {
                    simbolos.put(fila, token);
                    modelSimbolos.addRow(token.toStringArray());
                }
                objetosTokens.add(token);
            } else if (fila.matches("^('.*')$")) {
                Token token = new Token(fila, "T", "TEX");
                model.addRow(token.toStringArray());
                if (!simbolos.containsKey(fila)) {
                    simbolos.put(fila, token);
                    modelSimbolos.addRow(token.toStringArray());
                }
                objetosTokens.add(token);
            } else if (fila.matches("^(\\d+|(\\d+\\.\\d+))$")) {
                Token token = new Token(fila, "N", "NUM");
                model.addRow(token.toStringArray());
                if (!simbolos.containsKey(fila)) {
                    simbolos.put(fila, token);
                    modelSimbolos.addRow(token.toStringArray());
                }
                objetosTokens.add(token);
            } else {
                JOptionPane.showMessageDialog(null, "Error de análisis: Símbolo \"" + fila + "\" no reconocido", "Error de análisis", JOptionPane.WARNING_MESSAGE);

                WindowEvent wev = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
                Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev);
                setVisible(false);
                dispose();

                break;
            }
        }
    }

    private Hashtable<String, Token> getSimbolos() {
        Hashtable<String, Token> simbolos = new Hashtable<>();
        simbolos.put("Int", new Token("Int", "I", "PR"));
        simbolos.put("Float", new Token("Float", "F", "PR"));
        simbolos.put("Str", new Token("Str", "S", "PR"));
        simbolos.put("print", new Token("print", "print", "PR"));
        simbolos.put("input", new Token("input", "in", "PR"));
        simbolos.put("compare", new Token("compare", "compare", "PR"));
        simbolos.put("else", new Token("else", "else", "PR"));
        simbolos.put("endCompare", new Token("endCompare", "endCompare", "PR"));
        simbolos.put("loop", new Token("loop", "loop", "PR"));
        simbolos.put("endLoop", new Token("endLoop", "endLoop", "PR"));
        simbolos.put("programStart", new Token("programStart", "programStart", "PR"));
        simbolos.put("programEnd", new Token("programEnd", "programEnd", "PR"));
        simbolos.put("~", new Token("~", "~", "SEP"));
        simbolos.put(":", new Token(":", ":", "SEP"));
        simbolos.put("+", new Token("+", "+", "OP"));
        simbolos.put("-", new Token("-", "-", "OP"));
        simbolos.put("*", new Token("*", "*", "OP"));
        simbolos.put("/", new Token("/", "*", "OP"));
        simbolos.put("->", new Token("->", "->", "OP"));
        simbolos.put("<>", new Token("<>", "<>", "OP"));
        simbolos.put("=", new Token("=", "=", "OP"));
        simbolos.put("<", new Token("<", "<", "OP"));
        simbolos.put(">", new Token(">", ">", "OP"));
        return simbolos;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelSimbolos = new javax.swing.JLabel();
        jScrollPaneSimbolos = new javax.swing.JScrollPane();
        jTableSimbolos = new javax.swing.JTable();
        jLabelTokens = new javax.swing.JLabel();
        jScrollPaneTokens = new javax.swing.JScrollPane();
        jTableTokens = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabelSimbolos.setText("Tabla Símbolos");

        jTableSimbolos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Int", "i", "PR"},
                {"Float", "f", "PR"},
                {"Str", "s", "PR"},
                {"print", "p", "PR"},
                {"input", "in", "PR"},
                {"compare", "c", "PR"},
                {"else", "e", "PR"},
                {"endCompare", "ec", "PR"},
                {"loop", "l", "PR"},
                {"endLoop", "el", "PR"},
                {"programStart", "ps", "PR"},
                {"programEnd", "pe", "PR"},
                {"~", "~", "SEP"},
                {":", ":", "SEP"},
                {"+", "+", "OP"},
                {"-", "-", "OP"},
                {"*", "*", "OP"},
                {"/", "/", "OP"},
                {"->", "->", "OP"},
                {"<>", "<>", "OP"},
                {"=", "=", "OP"},
                {"<", "<", "OP"},
                {">", ">", "OP"}
            },
            new String [] {
                "Lexema", "Identificador", "Categoría"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSimbolos.setMinimumSize(new java.awt.Dimension(0, 200));
        jScrollPaneSimbolos.setViewportView(jTableSimbolos);

        jLabelTokens.setText("Tabla Tokens");

        jTableTokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lexema", "Identificador", "Categoría"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableTokens.setMinimumSize(new java.awt.Dimension(0, 200));
        jScrollPaneTokens.setViewportView(jTableTokens);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneSimbolos, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSimbolos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneTokens, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTokens))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSimbolos)
                    .addComponent(jLabelTokens))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPaneSimbolos)
                    .addComponent(jScrollPaneTokens))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Resultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Resultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Resultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Resultados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Resultados(listaTokens).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelSimbolos;
    private javax.swing.JLabel jLabelTokens;
    private javax.swing.JScrollPane jScrollPaneSimbolos;
    private javax.swing.JScrollPane jScrollPaneTokens;
    private javax.swing.JTable jTableSimbolos;
    private javax.swing.JTable jTableTokens;
    // End of variables declaration//GEN-END:variables
}
